
#Write a program for the Tic-Tac-Toe game.\

import pygame
import sys
import random

# Initialize Pygame
pygame.init()

# Constants
WIDTH, HEIGHT = 300, 300
GRID_SIZE = 3
CELL_SIZE = WIDTH // GRID_SIZE

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)

# Create the game window
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Tic-Tac-Toe")

# Initialize the game board
board = [[' ' for _ in range(GRID_SIZE)] for _ in range(GRID_SIZE)]

# Function to draw the grid lines
def draw_grid():
    for i in range(1, GRID_SIZE):
        pygame.draw.line(screen, BLACK, (i * CELL_SIZE, 0), (i * CELL_SIZE, HEIGHT), 2)
        pygame.draw.line(screen, BLACK, (0, i * CELL_SIZE), (WIDTH, i * CELL_SIZE), 2)

# Function to draw X or O in a cell
def draw_symbol(row, col, symbol):
    font = pygame.font.Font(None, 100)
    text = font.render(symbol, True, BLACK)
    text_rect = text.get_rect(center=((col * CELL_SIZE) + CELL_SIZE // 2, (row * CELL_SIZE) + CELL_SIZE // 2))
    screen.blit(text, text_rect)

# Function to check for a win
def check_winner(symbol):
    for i in range(GRID_SIZE):
        if all(board[i][j] == symbol for j in range(GRID_SIZE)) or all(board[j][i] == symbol for j in range(GRID_SIZE)):
            return True
    if all(board[i][i] == symbol for i in range(GRID_SIZE)) or all(board[i][GRID_SIZE - 1 - i] == symbol for i in range(GRID_SIZE)):
        return True
    return False

# Function to check for a draw
def is_board_full():
    return all(board[i][j] != ' ' for i in range(GRID_SIZE) for j in range(GRID_SIZE))

# Function to reset the game
def reset_game():
    global board
    board = [[' ' for _ in range(GRID_SIZE)] for _ in range(GRID_SIZE)]

# Main game loop
turn = 'X'
running = True

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:  # Left mouse button clicked
            mouseX, mouseY = event.pos
            clicked_row = mouseY // CELL_SIZE
            clicked_col = mouseX // CELL_SIZE

            if 0 <= clicked_row < GRID_SIZE and 0 <= clicked_col < GRID_SIZE and board[clicked_row][clicked_col] == ' ':
                board[clicked_row][clicked_col] = turn

                # Check for a win
                if check_winner(turn):
                    print(f'{turn} wins!')
                    reset_game()

                # Check for a draw
                elif is_board_full():
                    print("It's a draw!")
                    reset_game()

                # Switch turn
                turn = 'O' if turn == 'X' else 'X'

    # Draw the grid
    screen.fill(WHITE)
    draw_grid()

    # Draw X or O in each cell
    for row in range(GRID_SIZE):
        for col in range(GRID_SIZE):
            if board[row][col] != ' ':
                draw_symbol(row, col, board[row][col])

    pygame.display.flip()

# Quit Pygame
pygame.quit()
sys.exit()

# #output

# C:\Users\DELL\Downloads>python new6.py
# pygame 2.6.1 (SDL 2.28.4, Python 3.11.1)
# Hello from the pygame community. https://www.pygame.org/contribute.html
# X wins!
# It's a draw!
# X wins!




detailed explanantion 



# Import required libraries
import pygame  # Used for creating the game GUI
import sys     # Used for system-specific functions like exiting the game
import random  # Not used in this version but can be used for AI/random moves

# Initialize all Pygame modules
pygame.init()

# Constants for screen size and grid dimensions
WIDTH, HEIGHT = 300, 300           # Window dimensions (300x300 pixels)
GRID_SIZE = 3                      # 3x3 Tic-Tac-Toe grid
CELL_SIZE = WIDTH // GRID_SIZE     # Each cell will be 100x100 pixels

# Define RGB color values
WHITE = (255, 255, 255)   # Background color
BLACK = (0, 0, 0)         # Grid lines and text color
RED = (255, 0, 0)         # Not used here, but can be used for highlighting

# Create the game window
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Tic-Tac-Toe")  # Title of the game window

# Initialize the board as a 2D list with empty spaces
board = [[' ' for _ in range(GRID_SIZE)] for _ in range(GRID_SIZE)]
# board = [[' ', ' ', ' '],
#          [' ', ' ', ' '],
#          [' ', ' ', ' ']]

# Function to draw the grid lines
def draw_grid():
    for i in range(1, GRID_SIZE):
        # Draw vertical lines
        pygame.draw.line(screen, BLACK, (i * CELL_SIZE, 0), (i * CELL_SIZE, HEIGHT), 2)
        # Draw horizontal lines
        pygame.draw.line(screen, BLACK, (0, i * CELL_SIZE), (WIDTH, i * CELL_SIZE), 2)

# Function to draw 'X' or 'O' in a specific cell
def draw_symbol(row, col, symbol):
    font = pygame.font.Font(None, 100)  # Default font with size 100
    text = font.render(symbol, True, BLACK)  # Render the symbol ('X' or 'O')
    # Center the text in the selected cell
    text_rect = text.get_rect(center=((col * CELL_SIZE) + CELL_SIZE // 2,
                                      (row * CELL_SIZE) + CELL_SIZE // 2))
    screen.blit(text, text_rect)  # Draw the symbol onto the screen

# Function to check if a player has won
def check_winner(symbol):
    # Check all rows and columns
    for i in range(GRID_SIZE):
        # Check i-th row and i-th column
        if all(board[i][j] == symbol for j in range(GRID_SIZE)) or \
           all(board[j][i] == symbol for j in range(GRID_SIZE)):
            return True
    # Check diagonals
    if all(board[i][i] == symbol for i in range(GRID_SIZE)) or \
       all(board[i][GRID_SIZE - 1 - i] == symbol for i in range(GRID_SIZE)):
        return True
    return False  # No win found

# Function to check if the board is full (draw)
def is_board_full():
    return all(board[i][j] != ' ' for i in range(GRID_SIZE) for j in range(GRID_SIZE))

# Function to reset the board for a new game
def reset_game():
    global board
    board = [[' ' for _ in range(GRID_SIZE)] for _ in range(GRID_SIZE)]

# Game starts with player 'X'
turn = 'X'
running = True  # Game loop control variable

# Main game loop
while running:
    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:  # If window is closed
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            # Get mouse position
            mouseX, mouseY = event.pos
            # Calculate grid cell that was clicked
            clicked_row = mouseY // CELL_SIZE
            clicked_col = mouseX // CELL_SIZE

            # If the clicked cell is valid and empty
            if 0 <= clicked_row < GRID_SIZE and 0 <= clicked_col < GRID_SIZE and board[clicked_row][clicked_col] == ' ':
                # Mark the cell with the current player's symbol
                board[clicked_row][clicked_col] = turn

                # Check if current player won
                if check_winner(turn):
                    print(f'{turn} wins!')  # Print result in console
                    reset_game()  # Reset the board for a new game

                # Check for draw
                elif is_board_full():
                    print("It's a draw!")  # Print result in console
                    reset_game()  # Reset the board

                # Switch turn to the other player
                turn = 'O' if turn == 'X' else 'X'

    # Drawing section
    screen.fill(WHITE)  # Fill background
    draw_grid()         # Draw grid lines

    # Draw all symbols currently on the board
    for row in range(GRID_SIZE):
        for col in range(GRID_SIZE):
            if board[row][col] != ' ':
                draw_symbol(row, col, board[row][col])

    # Update the display
    pygame.display.flip()

# When the loop ends (window is closed), quit Pygame and exit program
pygame.quit()
sys.exit()
